local cmp = require("cmp")
local lspkind = require("lspkind")
local luasnip = require("luasnip")
local tabnine_compare = require("cmp_tabnine.compare")
local tabnine_config = require("cmp_tabnine.config")
local compare = require("cmp.config.compare")
local cmp_mapping = require("packages.bindings.cmp_mappings")

tabnine_config:setup({
	max_lines = 1000, -- How many lines of buffer context to pass to TabNine
	max_num_results = 45, -- How many results to return
	sort = true, -- Sort results by returned priority
	run_on_every_keystroke = true, -- Generate new completion items on every keystroke. For more info, check out (https://github.com/tzachar/cmp-tabnine//issues/18)
	snippet_placeholder = "..", -- Indicates where the cursor will be placed in case a completion item is a snippet. Any string is accepted.
	ignored_file_types = {
		-- default is not to ignore
		-- uncomment to ignore in lua:
		-- lua = true
	},
	show_prediction_strength = false,
})

local source_mapping = {
	spell = "[SPL]",
	nvim_lsp = "[LSP]",
	cmp_tabnine = "[TN]",
	path = "[Path]",
	luasnip = "[Snp]",
	nvim_lua = "[Lua]",
}

cmp.setup({
	sorting = {
		priority_weight = 2,
		comparators = {
			compare.offset, -- prioritizes items closer to the cursor
			compare.score, -- prioritizes item similarity score
			compare.recently_used, -- prioritizes recently used items
			compare.exact, -- prioritizes items starting with exactly the same prefix
			compare.kind, -- prioritizes items with the same kind
			compare.length, -- prioritizes shorter completion items
			compare.order, -- prioritizes items in the same received order
			tabnine_compare, -- prioritizes TabNine suggestions
			compare.sort_text, -- prioritizes prefix matches within completion items
		},
	},
	snippet = {
		expand = function(args)
			luasnip.lsp_expand(args.body)
		end,
	},
	window = {
		completion = cmp.config.window.bordered(),
		documentation = cmp.config.window.bordered(),
	},
	sources = {
		{ name = "cmp_tabnine", priority = 5 },
		{ name = "nvim_lsp", priority = 4 },
		{ name = "luasnip", priority = 3 },
		{ name = "path", priority = 2 },
		{ name = "nvim_lsp_signature_help", priority = 1 },
		{
			name = "spell",
			option = {
				keep_all_entries = false,
				enable_in_context = function()
					return true
				end,
			},
			priority = 0,
		},
	},
	mapping = cmp_mapping,
	formatting = {
		fields = {
			cmp.ItemField.Abbr,
			cmp.ItemField.Kind,
			cmp.ItemField.Menu,
		},
		format = lspkind.cmp_format({
			mode = "symbol_text", -- options: 'text', 'text_symbol', 'symbol_text', 'symbol'
			maxwidth = 40, -- prevent the popup from showing more than provided characters (e.g 50 will not show more than 50 characters)
			-- The function below will be called before any actual modifications from lspkind
			-- so that you can provide more controls on popup customization. (See [#30](https://github.com/onsails/lspkind-nvim/pull/30))
			before = function(entry, vim_item)
				vim_item.kind = lspkind.presets.default[vim_item.kind]
				local menu = source_mapping[entry.source.name]

				if entry.source.name == "cmp_tabnine" then
					if entry.completion_item.data ~= nil and entry.completion_item.data.detail ~= nil then
						menu = entry.completion_item.data.detail .. " " .. menu
					end
					vim_item.kind = "ïƒ§"
				end

				vim_item.menu = menu

				return vim_item
			end,
		}),
		experimental = {
			native_menu = false,
			ghost_text = true,
		},
	},
})
-- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline("/", {
	mapping = cmp.mapping.preset.cmdline(),
	sources = cmp.config.sources({
		{ name = "nvim_lsp_document_symbol" },
	}, {
		{ name = "buffer" },
	}),
})
-- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline(":", {
	mapping = cmp.mapping.preset.cmdline(),
	sources = cmp.config.sources({
		{ name = "path" },
	}, {
		{ name = "cmdline" },
	}),
})
